-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ma is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample : IN STD_LOGIC_VECTOR (12 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of ma is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ma_ma,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.223625,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=493,HLS_SYN_LUT=185,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal memory_V_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_9 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_10 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_11 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_12 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_13 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_14 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_15 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_16 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_17 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_18 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_20 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_21 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_22 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_23 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_24 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_25 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_26 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_27 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_28 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_29 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_30 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_31 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal memory_V_32 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal j : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal accum : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    signal tmp_1_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1148_1_reg_620 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln1148_2_reg_625 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_rhs_phi_fu_145_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_reg_pp0_iter0_rhs_reg_142 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln691_fu_485_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_fu_527_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln703_fu_497_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_fu_497_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_1_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_fu_505_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_515_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln703_2_fu_523_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1148_fu_547_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1148_1_fu_573_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_578_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_602_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln1_fu_584_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    j_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                j <= ap_const_lv6_0;
            else
                if (((tmp_fu_477_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j <= add_ln691_fu_485_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                accum <= t_fu_527_p2;
                memory_V_1 <= memory_V_2;
                memory_V_10 <= memory_V_11;
                memory_V_11 <= memory_V_12;
                memory_V_12 <= memory_V_13;
                memory_V_13 <= memory_V_14;
                memory_V_14 <= memory_V_15;
                memory_V_15 <= memory_V_16;
                memory_V_16 <= memory_V_17;
                memory_V_17 <= memory_V_18;
                memory_V_18 <= memory_V_19;
                memory_V_19 <= memory_V_20;
                memory_V_2 <= memory_V_3;
                memory_V_20 <= memory_V_21;
                memory_V_21 <= memory_V_22;
                memory_V_22 <= memory_V_23;
                memory_V_23 <= memory_V_24;
                memory_V_24 <= memory_V_25;
                memory_V_25 <= memory_V_26;
                memory_V_26 <= memory_V_27;
                memory_V_27 <= memory_V_28;
                memory_V_28 <= memory_V_29;
                memory_V_29 <= memory_V_30;
                memory_V_3 <= memory_V_4;
                memory_V_30 <= memory_V_31;
                memory_V_31 <= memory_V_32;
                memory_V_32 <= sample;
                memory_V_4 <= memory_V_5;
                memory_V_5 <= memory_V_6;
                memory_V_6 <= memory_V_7;
                memory_V_7 <= memory_V_8;
                memory_V_8 <= memory_V_9;
                memory_V_9 <= memory_V_10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_615 <= t_fu_527_p2(25 downto 25);
                trunc_ln1148_1_reg_620 <= sub_ln1148_fu_547_p2(25 downto 5);
                trunc_ln1148_2_reg_625 <= t_fu_527_p2(25 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln691_fu_485_p2 <= std_logic_vector(unsigned(j) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_rhs_phi_fu_145_p4_assign_proc : process(memory_V_1, ap_phi_reg_pp0_iter0_rhs_reg_142, tmp_fu_477_p3)
    begin
        if ((tmp_fu_477_p3 = ap_const_lv1_1)) then 
            ap_phi_mux_rhs_phi_fu_145_p4 <= memory_V_1;
        elsif ((tmp_fu_477_p3 = ap_const_lv1_0)) then 
            ap_phi_mux_rhs_phi_fu_145_p4 <= ap_const_lv13_0;
        else 
            ap_phi_mux_rhs_phi_fu_145_p4 <= ap_phi_reg_pp0_iter0_rhs_reg_142;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_rhs_reg_142 <= "XXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(zext_ln415_fu_602_p1) + unsigned(trunc_ln1_fu_584_p4));
    r_V_fu_578_p3 <= 
        sub_ln1148_1_fu_573_p2 when (tmp_1_reg_615(0) = '1') else 
        trunc_ln1148_2_reg_625;
    ret_V_fu_505_p2 <= std_logic_vector(signed(sext_ln703_fu_497_p1) - signed(sext_ln703_1_fu_501_p1));
        sext_ln703_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_rhs_phi_fu_145_p4),14));

        sext_ln703_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_515_p3),26));

    sext_ln703_fu_497_p0 <= sample;
        sext_ln703_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_497_p0),14));

    shl_ln_fu_515_p3 <= (ret_V_fu_505_p2 & ap_const_lv8_0);
    sub_ln1148_1_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(trunc_ln1148_1_reg_620));
    sub_ln1148_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv26_0) - unsigned(t_fu_527_p2));
    t_fu_527_p2 <= std_logic_vector(unsigned(accum) + unsigned(sext_ln703_2_fu_523_p1));
    tmp_2_fu_594_p3 <= r_V_fu_578_p3(7 downto 7);
    tmp_fu_477_p3 <= j(5 downto 5);
    trunc_ln1_fu_584_p4 <= r_V_fu_578_p3(20 downto 8);
    zext_ln415_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_594_p3),13));
end behav;
