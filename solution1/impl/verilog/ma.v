// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ma_ma,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.223625,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=493,HLS_SYN_LUT=185,HLS_VERSION=2020_2}" *)

module ma (
        ap_clk,
        ap_rst,
        sample,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [12:0] sample;
output  [12:0] ap_return;

reg   [12:0] memory_V_1;
reg   [12:0] memory_V_2;
reg   [12:0] memory_V_3;
reg   [12:0] memory_V_4;
reg   [12:0] memory_V_5;
reg   [12:0] memory_V_6;
reg   [12:0] memory_V_7;
reg   [12:0] memory_V_8;
reg   [12:0] memory_V_9;
reg   [12:0] memory_V_10;
reg   [12:0] memory_V_11;
reg   [12:0] memory_V_12;
reg   [12:0] memory_V_13;
reg   [12:0] memory_V_14;
reg   [12:0] memory_V_15;
reg   [12:0] memory_V_16;
reg   [12:0] memory_V_17;
reg   [12:0] memory_V_18;
reg   [12:0] memory_V_19;
reg   [12:0] memory_V_20;
reg   [12:0] memory_V_21;
reg   [12:0] memory_V_22;
reg   [12:0] memory_V_23;
reg   [12:0] memory_V_24;
reg   [12:0] memory_V_25;
reg   [12:0] memory_V_26;
reg   [12:0] memory_V_27;
reg   [12:0] memory_V_28;
reg   [12:0] memory_V_29;
reg   [12:0] memory_V_30;
reg   [12:0] memory_V_31;
reg   [12:0] memory_V_32;
reg   [5:0] j;
reg   [25:0] accum;
reg   [0:0] tmp_1_reg_607;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [20:0] trunc_ln1148_1_reg_612;
reg   [20:0] trunc_ln1148_2_reg_617;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [12:0] ap_phi_mux_last_sample_V_phi_fu_137_p4;
wire   [12:0] ap_phi_reg_pp0_iter0_last_sample_V_reg_134;
wire   [0:0] tmp_fu_469_p3;
wire    ap_block_pp0_stage0;
wire   [5:0] add_ln691_fu_477_p2;
wire   [25:0] t_fu_519_p2;
wire  signed [12:0] sext_ln703_fu_489_p0;
wire  signed [13:0] sext_ln703_fu_489_p1;
wire  signed [13:0] sext_ln703_1_fu_493_p1;
wire   [13:0] ret_V_fu_497_p2;
wire   [21:0] shl_ln_fu_507_p3;
wire  signed [25:0] sext_ln703_2_fu_515_p1;
wire   [25:0] sub_ln1148_fu_539_p2;
wire   [20:0] sub_ln1148_1_fu_565_p2;
wire   [20:0] r_V_fu_570_p3;
wire   [0:0] tmp_2_fu_586_p3;
wire   [12:0] zext_ln415_fu_594_p1;
wire   [12:0] trunc_ln1_fu_576_p4;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 memory_V_1 = 13'd0;
#0 memory_V_2 = 13'd0;
#0 memory_V_3 = 13'd0;
#0 memory_V_4 = 13'd0;
#0 memory_V_5 = 13'd0;
#0 memory_V_6 = 13'd0;
#0 memory_V_7 = 13'd0;
#0 memory_V_8 = 13'd0;
#0 memory_V_9 = 13'd0;
#0 memory_V_10 = 13'd0;
#0 memory_V_11 = 13'd0;
#0 memory_V_12 = 13'd0;
#0 memory_V_13 = 13'd0;
#0 memory_V_14 = 13'd0;
#0 memory_V_15 = 13'd0;
#0 memory_V_16 = 13'd0;
#0 memory_V_17 = 13'd0;
#0 memory_V_18 = 13'd0;
#0 memory_V_19 = 13'd0;
#0 memory_V_20 = 13'd0;
#0 memory_V_21 = 13'd0;
#0 memory_V_22 = 13'd0;
#0 memory_V_23 = 13'd0;
#0 memory_V_24 = 13'd0;
#0 memory_V_25 = 13'd0;
#0 memory_V_26 = 13'd0;
#0 memory_V_27 = 13'd0;
#0 memory_V_28 = 13'd0;
#0 memory_V_29 = 13'd0;
#0 memory_V_30 = 13'd0;
#0 memory_V_31 = 13'd0;
#0 memory_V_32 = 13'd0;
#0 j = 6'd0;
#0 accum = 26'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        accum <= 26'd0;
    end else begin
        if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            accum <= t_fu_519_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        j <= 6'd0;
    end else begin
        if (((tmp_fu_469_p3 == 1'd0) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j <= add_ln691_fu_477_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        memory_V_1 <= memory_V_2;
        memory_V_10 <= memory_V_11;
        memory_V_11 <= memory_V_12;
        memory_V_12 <= memory_V_13;
        memory_V_13 <= memory_V_14;
        memory_V_14 <= memory_V_15;
        memory_V_15 <= memory_V_16;
        memory_V_16 <= memory_V_17;
        memory_V_17 <= memory_V_18;
        memory_V_18 <= memory_V_19;
        memory_V_19 <= memory_V_20;
        memory_V_2 <= memory_V_3;
        memory_V_20 <= memory_V_21;
        memory_V_21 <= memory_V_22;
        memory_V_22 <= memory_V_23;
        memory_V_23 <= memory_V_24;
        memory_V_24 <= memory_V_25;
        memory_V_25 <= memory_V_26;
        memory_V_26 <= memory_V_27;
        memory_V_27 <= memory_V_28;
        memory_V_28 <= memory_V_29;
        memory_V_29 <= memory_V_30;
        memory_V_3 <= memory_V_4;
        memory_V_30 <= memory_V_31;
        memory_V_31 <= memory_V_32;
        memory_V_32 <= sample;
        memory_V_4 <= memory_V_5;
        memory_V_5 <= memory_V_6;
        memory_V_6 <= memory_V_7;
        memory_V_7 <= memory_V_8;
        memory_V_8 <= memory_V_9;
        memory_V_9 <= memory_V_10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_607 <= t_fu_519_p2[32'd25];
        trunc_ln1148_1_reg_612 <= {{sub_ln1148_fu_539_p2[25:5]}};
        trunc_ln1148_2_reg_617 <= {{t_fu_519_p2[25:5]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_fu_469_p3 == 1'd1)) begin
        ap_phi_mux_last_sample_V_phi_fu_137_p4 = memory_V_1;
    end else if ((tmp_fu_469_p3 == 1'd0)) begin
        ap_phi_mux_last_sample_V_phi_fu_137_p4 = 13'd0;
    end else begin
        ap_phi_mux_last_sample_V_phi_fu_137_p4 = ap_phi_reg_pp0_iter0_last_sample_V_reg_134;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln691_fu_477_p2 = (j + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_last_sample_V_reg_134 = 'bx;

assign ap_return = (zext_ln415_fu_594_p1 + trunc_ln1_fu_576_p4);

assign r_V_fu_570_p3 = ((tmp_1_reg_607[0:0] == 1'b1) ? sub_ln1148_1_fu_565_p2 : trunc_ln1148_2_reg_617);

assign ret_V_fu_497_p2 = ($signed(sext_ln703_fu_489_p1) - $signed(sext_ln703_1_fu_493_p1));

assign sext_ln703_1_fu_493_p1 = $signed(ap_phi_mux_last_sample_V_phi_fu_137_p4);

assign sext_ln703_2_fu_515_p1 = $signed(shl_ln_fu_507_p3);

assign sext_ln703_fu_489_p0 = sample;

assign sext_ln703_fu_489_p1 = sext_ln703_fu_489_p0;

assign shl_ln_fu_507_p3 = {{ret_V_fu_497_p2}, {8'd0}};

assign sub_ln1148_1_fu_565_p2 = (21'd0 - trunc_ln1148_1_reg_612);

assign sub_ln1148_fu_539_p2 = (26'd0 - t_fu_519_p2);

assign t_fu_519_p2 = ($signed(accum) + $signed(sext_ln703_2_fu_515_p1));

assign tmp_2_fu_586_p3 = r_V_fu_570_p3[32'd7];

assign tmp_fu_469_p3 = j[32'd5];

assign trunc_ln1_fu_576_p4 = {{r_V_fu_570_p3[20:8]}};

assign zext_ln415_fu_594_p1 = tmp_2_fu_586_p3;

endmodule //ma
